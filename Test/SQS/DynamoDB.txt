NO.123 A company owns an asynchronous API 
that is used to ingest user requests and, based on the request type, dispatch requests 
to the appropriate microservice for processing. 
The company is using Amazon API Gateway to deploy the API front end, 
and an AWS Lambda function that invokes Amazon DynamoDB 
to store user requests before dispatching them to the processing microservices.
The company provisioned as much DynamoDB throughput as its budget allows, 
but the company is still experiencing availability issues and is losing user requests.
What should a solutions architect do to address this issue without impacting existing users? 

A. Add throttling on the API Gateway with server-side throttling limits.
B. Use DynamoDB Accelerator (DAX) and Lambda to buffer writes to DynamoDB.
C. Create a secondary index in DynamoDB for the table with the user requests.
D. Use the Amazon Simple Queue Service (Amazon SQS) queue and Lambda to buffer writes to DynamoDB.

Answer: D
Explanation:
By using an SQS queue and Lambda, the solutions architect can decouple the API front end from the processing microservices 
and improve the overall scalability and availability of the system. 
The SQS queue acts as a buffer, allowing the API front end to continue accepting user requests 
even if the processing microservices are experiencing high workloads or are temporarily unavailable. 
The Lambda function can then retrieve requests from the SQS queue 
and write them to DynamoDB, ensuring that all user requests are stored and processed. 

This approach allows the company to scale the processing microservices independently from the API front end, 
ensuring that the API remains available to users even during periods of high demand.