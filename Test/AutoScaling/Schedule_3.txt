
NO.113 A transaction processing company has weekly scripted batch jobs that run on Amazon EC2 instances. 
The EC2 instances are in an Auto Scaling group. 
The number of transactions can vary but the beseline CPU utilization that is noted on each run is at least 60%. 
The company needs to provision the capacity 30 minutes before the jobs run.
Currently engineering complete this task by manually modifying the Auto Scaling group parameters. 
The company does not have the resources to analyze the required capacity trends for the Auto Scaling group counts. 
The company needs an automated way to modify the Auto Scaling group's capacity.
Which solution will meet these requiements with the LEAST operational overhead?

A. Ceate a dynamic scalling policy for the Auto Scaling group. 
Configure the policy to scale based on the CPU utilization metric to 60%.

B. Create a scheduled scaling polcy for the Auto Scaling group. 
Set the appropriate desired capacity, minimum capacity, and maximum capacity. 
Set the recurrence to weekly. 
Set the start time to 30 minutes. 
Before the batch jobs run.

C. Create a predictive scaling policy for the Auto Scaling group. 
Configure the policy to scale based on forecast. 
Set the scaling metric to CPU utilization. 
Set the target value for the metric to 60%. 
In the Policy, set the instances to pre-launch 30 minutes before the jobs run.

D. Create an Amazon EventBridge event to invoke an AWS Lamda function 
when the CPU utilization metric value for the Auto Scaling group reaches 60%. 
Configure the Lambda function to increase the Auto Scaling group's desired capacity and maximum capacity by 20%.

Answer: C

Explanation:
This option is the most efficient because it uses a predictive scaling policy for the Auto Scaling group, 
which is a type of scaling policy that uses machine learning 
to predict capacity requirements based on historical data from CloudWatch. 

It also configures the policy to scale based on forecast, 
which enables the Auto Scaling group to adjust its capacity in advance of traffic changes. 

It also sets the scaling metric to CPU utilization and the target value for the metric to 60%, 
which aligns with the baseline CPU utilization that is noted on each run.

It also sets the instances to pre-launch 30 minutes before the jobs run, 
which ensures that enough capacity is provisioned before the weekly scripted batch jobs start. 
This solution meets the requirement of provisioning the capacity 30 minutes before 
the jobs run with the least operational overhead. 

Option A is less efficient because it uses a dynamic scaling policy for the Auto Scaling group, 
which is a type of scaling policy that adjusts your Auto Scaling group's capacity in response to changing demand. 
However, this does not provide a way to provision the capacity 30 minutes before the jobs run, 
as it only reacts to changing traffic. 

Option B is less efficient because it uses a scheduled scaling policy for the Auto Scaling group, 
which is a type of scaling policy that lets you scale your Auto Scaling group based on a schedule that you create. 
However, this does not provide a way to scale based on forecast or CPU utilization, 
as it only scales based on predefined metrics and policies. 

Option D is less efficient because it uses an Amazon EventBridge event 
to invoke an AWS Lambda function when the CPU utilization metric value for the Auto Scaling group reaches 60%, 
which is a way to trigger serverless functions based on events. 
However, this does not provide a way to provision the capacity 30 minutes before the jobs run, 
as it only reacts to changing traffic.